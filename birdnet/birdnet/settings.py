"""
Django settings for birdnet project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import json
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load configuration from config.json
config_path = os.path.join(BASE_DIR, 'config.json')

config = None
def load_config():
    global config
    with open(config_path) as config_file:
        config = json.load(config_file)
    return config
load_config()

# Assign values from the config file to settings
BIRDNET_WEB_HISTORY_DAYS_IN_OBSERVATIONS_TABLE = int(config.get("BIRDNET_WEB_HISTORY_DAYS_IN_OBSERVATIONS_TABLE", 10))
SPECTOGRAM_MAX_FREQUENCY = int(config.get("SPECTOGRAM_MAX_FREQUENCY", 12000))
BIRDNET_CONFIDENCE_THRESHOLD = float(config.get("BIRDNET_CONFIDENCE_THRESHOLD", 0.7))
LATITUDE = float(config.get("LATITUDE", 0))
LONGITUDE = float(config.get("LONGITUDE", 0))
LOCATION_NAME = config.get("LOCATION_NAME", "Backyard_1")
BIRDNET_VERSION = config.get("BIRDNET_VERSION", "2.4")
BIRDNET_UI_VERSION = config.get("BIRDNET_UI_VERSION", "1.0.0")
BIRDNET_ADDRESS = config.get("BIRDNET_ADDRESS", "localhost")
BIRDNET_PORT = int(config.get("BIRDNET_PORT", 8150))
BIRDNET_WS_PORT = int(config.get("BIRDNET_WS_PORT", 8151))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


load_dotenv()  # Load environment variables from .env file
SECRET_KEY = os.getenv('SECRET_KEY', 'default-secret-key')  
EBIRD_API_KEY = os.getenv('EBIRD_API_KEY', 'default-ebird-api-key')  


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'BirdNET_UI',
    'channels',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'birdnet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'birdnet.wsgi.application'
ASGI_APPLICATION = 'birdnet.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
    }, 
    'birds': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'BirdNET_UI', 'birds.db'),
    }, 
    'ebirds': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'BirdNET_UI', 'ebirds.db'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Define the directory for collected static files

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
